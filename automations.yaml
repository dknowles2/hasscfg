- id: letsencrypt-renewal
  alias: LetsEncrypt renewal
  trigger:
  - platform: time
    at: 00:00:00
  action:
  - service: hassio.addon_stop
    data:
      addon: core_nginx_proxy
  - service: hassio.addon_restart
    data:
      addon: core_letsencrypt
  - delay: 00:01:30
  - service: hassio.addon_start
    data:
      addon: core_nginx_proxy
- id: '1641092271455'
  alias: Sync Deck Lights
  description: ''
  use_blueprint:
    path: adchevrier/synchronize-the-on-off-state-of-2-entities.yaml
    input:
      entity_1: switch.deck_light
      entity_2: switch.deck_string_lights
- id: '1666221462797'
  alias: Outdoor Holiday Lights Schedule
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.outdoor_lights_schedule
    trigger: state
  - event: start
    trigger: homeassistant
  conditions: []
  actions:
  - variables:
      entities:
      - switch.outdoor_holiday_lights
      - switch.outdoor_1
      - switch.outdoor_2
  - if:
    - condition: state
      entity_id: binary_sensor.outdoor_lights_schedule
      state: 'on'
    then:
    - data: {}
      metadata: {}
      target:
        entity_id: '{{ entities }}'
      action: switch.turn_on
    else:
    - data: {}
      metadata: {}
      target:
        entity_id: '{{ entities }}'
      action: switch.turn_off
  mode: restart
- id: '1671295554466'
  alias: Indoor Holiday Lights Schedule
  description: ''
  triggers:
  - entity_id:
    - schedule.indoor_holiday_lights_schedule
    trigger: state
  - event: start
    trigger: homeassistant
  conditions: []
  actions:
  - if:
    - condition: state
      entity_id: schedule.indoor_holiday_lights_schedule
      state: 'on'
    then:
    - data: {}
      metadata: {}
      target:
        entity_id:
        - switch.indoor_holiday_lights_group
      action: switch.turn_on
    else:
    - data: {}
      metadata: {}
      target:
        entity_id:
        - switch.indoor_holiday_lights_group
      action: switch.turn_off
  mode: restart
- id: '1679071951950'
  alias: Doorbell detected person
  description: ''
  trigger:
  - platform: device
    device_id: e94f865b148d4476194fa9a57cc74f9c
    domain: nest
    type: camera_person
  condition: []
  action: []
  mode: single
- id: '1679071973766'
  alias: Doorbell pressed
  description: ''
  triggers:
  - device_id: e94f865b148d4476194fa9a57cc74f9c
    domain: nest
    type: doorbell_chime
    trigger: device
  conditions: []
  actions:
  - data:
      message: Doorbell Pressed
      data:
        image: /api/nest/event_media/{{ trigger.event.data.device_id }}/{{ trigger.event.data.nest_event_id
          }}/thumbnail
    action: notify.mobile_app_davids_iphone_14_pro
  mode: restart
- id: '1680704667983'
  alias: Washer run completed
  description: ''
  triggers:
  - entity_id:
    - sensor.washer_current_status
    from:
    to: end
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: person.david
      state: home
    - condition: or
      conditions:
      - condition: state
        entity_id: sensor.dryer_current_status
        state: power_off
      - condition: state
        entity_id: sensor.dryer_current_status
        state: end
  actions:
  - action: notify.mobile_app_davids_iphone_14_pro
    metadata: {}
    data:
      message: Washer is done
  mode: restart
- id: '1680705374664'
  alias: Dryer run completed
  description: ''
  triggers:
  - entity_id:
    - sensor.dryer_current_status
    to: end
    trigger: state
  conditions:
  - condition: state
    entity_id: person.david
    state: home
  actions:
  - action: notify.mobile_app_davids_iphone_14_pro
    metadata: {}
    data:
      message: Dryer is done
  mode: restart
- id: '1703026402697'
  alias: Water Leak Detected
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.utility_closet_moisture
    - binary_sensor.sump_pump_moisture
    - binary_sensor.guest_bathroom_sink_moisture
    - binary_sensor.jacob_s_sink_moisture
    from:
    to: 'on'
  condition: []
  action:
  - service: notify.mobile_app_davids_iphone_14_pro
    data:
      message: '{{ trigger.to_state.attributes.friendly_name }} Detected!'
      data:
        url: https://casa.knowles.xyz/history/?entity_id={{ trigger.entity_id }}
        push:
          interruption-level: critical
          sound:
            name: default
            critical: 1
            volume: 1
  mode: single
- id: '1708958981471'
  alias: 'iOS Action: Toggle Office Lights'
  description: ''
  trigger:
  - event_type: ios.action_fired
    platform: event
    event_data:
      actionID: D1C24577-8376-4CB6-BA77-F29C3B5BB549
  condition: []
  action:
  - service: light.toggle
    metadata: {}
    data:
      transition: 2
    target:
      entity_id: light.office
  mode: single
- id: '1710280107429'
  alias: 'Office Button Click: Toggle Office Lights'
  description: ''
  triggers:
  - domain: mqtt
    device_id: 79254273acc4e9e3b753409a81122ecc
    type: action
    subtype: single
    trigger: device
  conditions: []
  actions:
  - metadata: {}
    data: {}
    target:
      area_id: fabc481884a040388de605a88425f981
    action: light.toggle
  mode: restart
- id: '1711589046805'
  alias: Sync ecobee vacation hold
  description: ''
  trigger:
  - platform: calendar
    event: start
    offset: '-48:0:0'
    entity_id: calendar.casa_de_knowles
  condition:
  - condition: template
    value_template: '{{ trigger.calendar_event.summary is match("A/C Hold", ignorecase=True)
      }}'
  action:
  - repeat:
      for_each:
      - climate.downstairs
      - climate.upstairs
      sequence:
      - service: ecobee.create_vacation
        alias: Add vacation for {{ repeat.item }}
        data:
          fan_mode: auto
          entity_id: '{{ repeat.item }}'
          vacation_name: '{{ vacation_start_date }}'
          start_date: '{{ vacation_start_date }}'
          start_time: '{{ vacation_start_time }}'
          end_date: '{{ vacation_end_date }}'
          end_time: '{{ vacation_end_time }}'
          cool_temp: 75
          heat_temp: 60
  variables:
    vacation_start_date: '{{ as_timestamp(trigger.calendar_event.start) | timestamp_custom(''%Y-%m-%d'')
      }}'
    vacation_start_time: '{{ as_timestamp(trigger.calendar_event.start) | timestamp_custom(''%H:%M:00'')
      }}'
    vacation_end_date: '{{ as_timestamp(trigger.calendar_event.end) | timestamp_custom(''%Y-%m-%d'')
      }}'
    vacation_end_time: '{{ as_timestamp(trigger.calendar_event.end) | timestamp_custom(''%H:%M:00'')
      }}'
  mode: parallel
- id: '1719230656280'
  alias: Restart Frigate
  description: Restarts Frigate at 5am and 3pm
  trigger:
  - platform: time
    at: 05:00:00
  - platform: time
    at: '15:00:00'
  condition: []
  action:
  - service: mqtt.publish
    metadata: {}
    data:
      topic: frigate/restart
      payload: '1'
  mode: single
- id: '1723471744681'
  alias: Cleaners Arrived
  description: ''
  triggers:
  - entity_id:
    - lock.front_door
    from: locked
    to: unlocked
    trigger: state
  conditions:
  - condition: state
    entity_id: lock.front_door
    attribute: changed_by
    state: keypad - Cleaners
  actions:
  - action: cover.open_cover
    metadata: {}
    data: {}
    target:
      floor_id: second_floor
  - action: climate.set_temperature
    metadata: {}
    data:
      temperature: 74
    target:
      entity_id:
      - climate.downstairs
      - climate.upstairs
  - action: input_boolean.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.cleaners_present
  mode: restart
- id: '1723472237810'
  alias: Cleaners Departed
  description: ''
  triggers:
  - entity_id:
    - lock.front_door
    from: unlocked
    to: locked
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.cleaners_present
    state: 'on'
  actions:
  - action: cover.close_cover
    target:
      entity_id:
      - cover.jacob_privacy_shade
      - cover.office_privacy_shade
      - cover.guest_bedroom_privacy_shade
      - cover.primary_bedroom_privacy_shades
    data: {}
  - action: input_boolean.turn_off
    target:
      entity_id:
      - input_boolean.cleaners_present
    data: {}
  - action: light.turn_off
    metadata: {}
    data: {}
    target:
      area_id:
      - 1e2306abb00749aa931ba30c183537e9
      - 66a838f11a316bbbc5753120f4cb8484
      - 3fd03a10e28e47aa8ca8ffb10da65137
      - mud_room
      - 257560448cec20937ef049245016db71
      floor_id: second_floor
  - action: lock.lock
    metadata: {}
    data: {}
    target:
      device_id: 163b30812c96045873bdc81491a670d8
  mode: restart
- id: '1733495528901'
  alias: Downstairs Lights Schedule
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.downstairs_lights_schedule
  conditions: []
  actions:
  - variables:
      lights:
      - light.lamps
      - light.sconces
  - if:
    - condition: state
      entity_id: binary_sensor.downstairs_lights_schedule
      state: 'on'
    then:
    - action: light.turn_on
      metadata: {}
      data: {}
      target:
        entity_id: '{{ lights }}'
    else:
    - action: light.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: '{{ lights }}'
  mode: restart
- id: '1733516878650'
  alias: Privacy Shades Schedule
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.privacy_shades_target_position
    id: schedule
  - trigger: state
    entity_id:
    - sensor.sun_solar_azimuth
    id: azimuth
  actions:
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
    alias: Delay for 10 seconds (wait for sensors to update)
  - variables:
      shades: '{{ label_entities(''Privacy'') | list }}'
      cooldown_hours: '{{ int(states(''input_number.shade_automation_cooldown''))
        }}'
      cooldown: '{{ timedelta(hours=cooldown_hours) }}'
  - alias: For each shade
    repeat:
      for_each: '{{ shades }}'
      sequence:
      - variables:
          target_position: '{% from ''shades.jinja'' import get_shade_position %}

            {{ get_shade_position(repeat.item) }}'
          current_position: '{{ state_attr(repeat.item, ''current_position'') }}'
          time_since_last_update: '{{ utcnow() - states[repeat.item].last_updated
            }}'
          in_cooldown: '{{ time_since_last_update < cooldown }}'
          is_closing: '{{ int(target_position) == 0 }}'
          skip_label: '{{ iif(is_closing, ''manual_close'', ''manual_open'') }}'
          shade_labels: '{{ labels(repeat.item) }}'
          should_skip: '{{ skip_label in shade_labels }}'
      - if:
        - alias: If requires manual action
          condition: template
          value_template: '{{ not should_skip }}'
        - alias: If target position is known
          condition: template
          value_template: '{{ target_position > -1 }}'
        - alias: If target position doesn't match expected
          condition: template
          value_template: '{{ target_position != current_position }}'
        - alias: If not in cooldown
          condition: template
          value_template: '{{ not in_cooldown }}'
          enabled: false
        then:
        - alias: Set shade position
          action: script.turn_on
          target:
            entity_id: script.set_shade_position
          data:
            variables:
              entity_id: '{{ repeat.item }}'
              position: '{{ int(target_position) }}'
              cooldown: '{{ cooldown }}'
  trace:
    stored_traces: 100
  mode: restart
- id: '1733517013251'
  alias: Blackout Shades Schedule
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - sensor.blackout_shades_target_position
    id: schedule
  - trigger: state
    entity_id:
    - sensor.sun_solar_azimuth
    id: azimuth
  actions:
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
    alias: Delay for 10 seconds (wait for sensors to update)
  - variables:
      shades: '{{ label_entities(''Blackout'') | list }}'
      cooldown_hours: '{{ int(states(''input_number.shade_automation_cooldown''))
        }}'
      cooldown: '{{ timedelta(hours=cooldown_hours) }}'
  - alias: For each shade
    repeat:
      for_each: '{{ shades }}'
      sequence:
      - variables:
          target_position: '{% from ''shades.jinja'' import get_shade_position %}

            {{ get_shade_position(repeat.item) }}'
          current_position: '{{ state_attr(repeat.item, ''current_position'') }}'
          time_since_last_update: '{{ utcnow() - states[repeat.item].last_updated
            }}'
          in_cooldown: '{{ time_since_last_update < cooldown }}'
          is_closing: '{{ int(target_position) == 0 }}'
          skip_label: '{{ iif(is_closing, ''manual_close'', ''manual_open'') }}'
          shade_labels: '{{ labels(repeat.item) }}'
          should_skip: '{{ skip_label in shade_labels }}'
      - if:
        - alias: If requires manual action
          condition: template
          value_template: '{{ not should_skip }}'
        - alias: If target position is known
          condition: template
          value_template: '{{ target_position > -1 }}'
        - alias: If target position doesn't match expected
          condition: template
          value_template: '{{ target_position != current_position }}'
        - alias: If not in cooldown
          condition: template
          value_template: '{{ not in_cooldown }}'
          enabled: false
        then:
        - alias: Set shade position
          action: script.turn_on
          target:
            entity_id: script.set_shade_position
          data:
            variables:
              entity_id: '{{ repeat.item }}'
              position: '{{ int(target_position) }}'
              cooldown: '{{ cooldown }}'
  trace:
    stored_traces: 100
  mode: restart
- id: '1733523145702'
  alias: Outdoor Lights Schedule
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.outdoor_lights_schedule
    trigger: state
  - event: start
    trigger: homeassistant
  conditions: []
  actions:
  - variables:
      entities:
      - light.front_door
      - light.front_porch
      - light.driveway_lights
  - if:
    - condition: state
      entity_id: binary_sensor.outdoor_lights_schedule
      state: 'on'
    then:
    - action: switch.turn_on
      metadata: {}
      data: {}
      target:
        device_id: 63aa3ed82cdc99ea126e49458082e686
    - data: {}
      metadata: {}
      target:
        entity_id: '{{ entities }}'
      action: light.turn_on
    else:
    - data: {}
      metadata: {}
      target:
        entity_id: '{{ entities }}'
      action: light.turn_off
  mode: restart
- id: '1735483900049'
  alias: Toggle lights on brightness changes
  description: ''
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.living_room_esphome_illuminance
    above: input_number.living_room_lux_upper_bound
  - trigger: numeric_state
    entity_id:
    - sensor.living_room_esphome_illuminance
    below: input_number.living_room_lux_lower_bound
  conditions:
  - condition: numeric_state
    entity_id: sensor.casa_de_knowles_cloud_cover
    above: 45
  - condition: state
    entity_id: binary_sensor.daytime
    state: 'on'
  actions:
  - if:
    - condition: numeric_state
      entity_id: sensor.living_room_esphome_illuminance
      below: input_number.living_room_lux_lower_bound
    then:
    - action: light.turn_on
      metadata: {}
      data:
        transition: 2
      target:
        entity_id:
        - light.lamps
        - light.sconces
    - delay:
        hours: 0
        minutes: 5
        seconds: 0
    else:
    - condition: numeric_state
      entity_id: sensor.living_room_esphome_illuminance
      above: input_number.living_room_lux_upper_bound
    - action: light.turn_off
      metadata: {}
      data:
        transition: 2
      target:
        entity_id:
        - light.lamps
        - light.sconces
    - delay:
        hours: 0
        minutes: 5
        seconds: 0
  mode: single
- id: '1735852517153'
  alias: Restart Studio Code Server Nightly
  description: ''
  triggers:
  - at: 00:00:00
    trigger: time
  conditions: []
  actions:
  - data:
      addon: a0d7b954_vscode
    action: hassio.addon_restart
  mode: single
- id: '1741378804726'
  alias: Turn off Jacob's lamp during power outage
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - switch.jacob_plug
    from: unavailable
    to:
  conditions:
  - condition: numeric_state
    entity_id: sensor.generator_engine_output_voltage
    above: 0
  actions:
  - action: switch.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: switch.jacob_plug
  mode: single
